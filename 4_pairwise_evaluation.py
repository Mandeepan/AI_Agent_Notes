import os
from dotenv import load_dotenv
from google import genai
from google.genai import types
from google.api_core import retry

import enum

load_dotenv()
GOOGLE_API_KEY = os.getenv("GOOLGE_API_KEY")
client = genai.Client(api_key=GOOGLE_API_KEY)

# Set up a retry helper. This allows "Run all" without worrying about per-minute quota.
is_retriable = lambda e: (isinstance(e, genai.errors.APIError) and e.code in {429, 503})
if not hasattr(genai.models.Models.generate_content, '__wrapped__'):
  genai.models.Models.generate_content = retry.Retry(
      predicate=is_retriable)(genai.models.Models.generate_content)

### STEP 1 : SET UP THE ORIGINAL PROMPT BY DIFFERENT Q and SETTINGS ###
document_file = client.files.upload(file='./src/gemini.pdf')
# Try these instructions, or edit and add your own.
terse_guidance = "Answer the following question in a single sentence, or as close to that as possible."
moderate_guidance = "Provide a brief answer to the following question, use a citation if necessary, but only enough to answer the question."
cited_guidance = "Provide a thorough, detailed answer to the following question, citing the document and supplying additional background information as much as possible."
guidance_options = {
    'Terse': terse_guidance,
    'Moderate': moderate_guidance,
    'Cited': cited_guidance,
}
questions = [
    "What metric(s) are used to evaluate long context performance?",
    "How does the model perform on code tasks?",
    "How many layers does it have?",
    "Why is it called Gemini?",
]
if not questions:
  raise NotImplementedError('Add some questions to evaluate!')
  
def answer_question(question: str, guidance: str = '') -> str:
  """Generate an answer to the question using the uploaded document and guidance."""
  config = types.GenerateContentConfig(
      temperature=0.0,
      system_instruction=guidance,
  )
  response = client.models.generate_content(
      model='gemini-2.0-flash',
      config=config,
      contents=[question, document_file],
  )

  return response.text

# # test Step 1 result by uncomment the following
# answer = answer_question(questions[0], terse_guidance)
# print(answer)

### STEP 2 : SET UP EVALUATION PROMPT ###

QA_PAIRWISE_PROMPT = """\
# Instruction
You are an expert evaluator. Your task is to evaluate the quality of the responses generated by two AI models. We will provide you with the user input and a pair of AI-generated responses (Response A and Response B). You should first read the user input carefully for analyzing the task, and then evaluate the quality of the responses based on the Criteria provided in the Evaluation section below.

You will first judge responses individually, following the Rating Rubric and Evaluation Steps. Then you will give step-by-step explanations for your judgment, compare results to declare the winner based on the Rating Rubric and Evaluation Steps.

# Evaluation
## Metric Definition
You will be assessing question answering quality, which measures the overall quality of the answer to the question in the user prompt. Pay special attention to length constraints, such as in X words or in Y sentences. The instruction for performing a question-answering task is provided in the user prompt. The response should not contain information that is not present in the context (if it is provided).

## Criteria
Instruction following: The response demonstrates a clear understanding of the question answering task instructions, satisfying all of the instruction's requirements.
Groundedness: The response contains information included only in the context if the context is present in the user prompt. The response does not reference any outside information.
Completeness: The response completely answers the question with sufficient detail.
Fluent: The response is well-organized and easy to read.

## Rating Rubric
"A": Response A answers the given question as per the criteria better than response B.
"SAME": Response A and B answers the given question equally well as per the criteria.
"B": Response B answers the given question as per the criteria better than response A.

## Evaluation Steps
STEP 1: Analyze Response A based on the question answering quality criteria: Determine how well Response A fulfills the user requirements, is grounded in the context, is complete and fluent, and provides assessment according to the criterion.
STEP 2: Analyze Response B based on the question answering quality criteria: Determine how well Response B fulfills the user requirements, is grounded in the context, is complete and fluent, and provides assessment according to the criterion.
STEP 3: Compare the overall performance of Response A and Response B based on your analyses and assessment.
STEP 4: Output your preference of "A", "SAME" or "B" to the pairwise_choice field according to the Rating Rubric.
STEP 5: Output your assessment reasoning in the explanation field.

# User Inputs and AI-generated Responses
## User Inputs
### Prompt
{prompt}

# AI-generated Response

### Response A
{baseline_model_response}

### Response B
{response}
"""


class AnswerComparison(enum.Enum):
  A = 'A'
  SAME = 'SAME'
  B = 'B'


def eval_pairwise(prompt, response_a, response_b, n=1):
  """Determine the better of two answers to the same prompt."""

  chat = client.chats.create(model='gemini-2.0-flash')

  # Generate the full text response.
  response = chat.send_message(
      message=QA_PAIRWISE_PROMPT.format(
          prompt=[prompt, document_file],
          baseline_model_response=response_a,
          response=response_b)
  )
  verbose_eval = response.text

  # Coerce into the desired structure.
  structured_output_config = types.GenerateContentConfig(
      response_mime_type="text/x.enum",
      response_schema=AnswerComparison,
  )
  response = chat.send_message(
      message="Convert the final score.",
      config=structured_output_config,
  )
  structured_eval = response.parsed

  return verbose_eval, structured_eval

# # test Step 2 result by uncomment the following
# question = questions[0]
# answer_a = answer_question(question, terse_guidance)
# answer_b = answer_question(question, cited_guidance)
# text_eval, struct_eval = eval_pairwise(
#     prompt=question,
#     response_a=answer_a,
#     response_b=answer_b,
# )
# print(text_eval, struct_eval)

### STEP 3: CREATE A CLASS AND CALL IN THE LOOP ###
# Number of times to repeat each task in order to reduce error and calculate an average.
# Increasing it will take longer but give better results, try 2 or 3 to start.
NUM_ITERATIONS = 2

class QAGuidancePrompt:
    """A question-answering guidance prompt or system instruction."""
    def __init__(self, prompt, questions, n_comparisons=NUM_ITERATIONS):
        """Create the prompt. Provide questions to evaluate against, and number of evals to perform."""
        self.prompt = prompt
        self.questions = questions
        self.n = n_comparisons

    def __str__(self):
        return self.prompt

    def _compare(self, other, question, n=1):
        """Compare two prompts on a single question."""
        answer_a = answer_question(question, self.prompt)
        answer_b = answer_question(question, other.prompt)

        _, result = eval_pairwise(
            prompt=question,
            response_a=answer_a,
            response_b=answer_b,
            n=n,  # Cache buster
        )
        print(f'q[{question}], a[{self.prompt[:20]}...], b[{other.prompt[:20]}...]: {result}')

        # Convert the enum to the standard Python numeric comparison values.
        if result is AnswerComparison.A:
            return 1
        elif result is AnswerComparison.B:
            return -1
        else:
            return 0

    def _compare_n(self, other, question):
        """Compare two prompts on a question over n trials."""
        results = [self._compare(other, question, n) for n in range(self.n)]
        mean = sum(results) / len(results)
        return mean

    def _compare_all(self, other):
        """Compare two prompts on all questions over n trials."""
        results = [self._compare_n(other, q) for q in questions]
        mean = sum(results) / len(results)
        return round(mean)

    def __eq__(self, other):
        """Equality check that performs pairwise evaluation."""
        if not isinstance(other, QAGuidancePrompt):
            return NotImplemented

        return self._compare_all(other) == 0

    def __lt__(self, other):
        """Ordering check that performs pairwise evaluation."""
        if not isinstance(other, QAGuidancePrompt):
            return NotImplemented

        return self._compare_all(other) < 0

terse_prompt = QAGuidancePrompt(terse_guidance, questions)
moderate_prompt = QAGuidancePrompt(moderate_guidance, questions)
cited_prompt = QAGuidancePrompt(cited_guidance, questions)

# Sort in reverse order, so that best is first
sorted_results = sorted([terse_prompt, moderate_prompt, cited_prompt], reverse=True)
for i, p in enumerate(sorted_results):
  if i:
    print('---')

  print(f'#{i+1}: {p}')

print(sorted_results)